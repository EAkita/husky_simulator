<?xml version="1.0"?>
<!--
Authored by Akita for TeMoto_2 simulation test
Last Edited on  08/17/2021 -->

<launch>
  <!-- No args passed. This is taken care of by spawn_husky.launch  -->
  
  <arg name="laser_enabled" default="true"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <arg name="robotiq_grippers_enabled" default="false"/>
  <arg name="dual_ur5_enabled" default="false"/>

  <param name="robot_description" command="$(find xacro)/xacro.py $(find husky_gazebo)/urdf/description.gazebo.xacro
    laser_enabled:=$(arg laser_enabled)
    ur5_enabled:=$(arg ur5_enabled)
    kinect_enabled:=$(arg kinect_enabled)
    dual_ur5_enabled:=$(arg dual_ur5_enabled)
    robotiq_grippers_enabled:=$(arg robotiq_grippers_enabled)
    " />

  <!-- Load Husky control information -->
  <include file="$(find husky_control)/launch/control.launch"/>

  <!-- Include ros_control configuration for left and right ur5, only used in simulation -->
  <group if="$(arg dual_ur5_enabled)">
   <rosparam command="load" file="$(find husky_control)/config/control_left_ur5.yaml" />
            <rosparam command="load" file="$(find husky_control)/config/control_left_ur5.yaml" />
            <rosparam command="load" file="$(find husky_control)/config/control_right_ur5.yaml" />
            <rosparam command="load" file="$(find husky_control)/config/control_flir_ptu.yaml" />
            <node name="left_arm_controller_spawner" pkg="controller_manager" type="spawner" args="l_arm_controller --shutdown-timeout 3"/>
            <node name="right_arm_controller_spawner" pkg="controller_manager" type="spawner" args="r_arm_controller --shutdown-timeout 3"/>
            <node name="flir_ptu_controller" pkg="controller_manager" type="spawner" args="flir_ptu_controller --shutdown-timeout 3"/>
  </group>

  <!-- Include robotiq gripper configs for left and right gripper, only used in sim -->
  <group if="$(arg robotiq_grippers_enabled)">
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robotiq_hands_l_hand_robot_state_publisher">
          <param name="publish_frequency" type="double" value="50.0" />
        </node>
        <node name="left_gripper_js_relay" pkg="topic_tools" type="relay" args="/robotiq_hands/left_hand/joint_states /joint_states"/>
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robotiq_hands_r_hand_robot_state_publisher">
          <param name="publish_frequency" type="double" value="50.0" />
        </node>
        <node name="right_gripper_js_relay" pkg="topic_tools" type="relay" args="/robotiq_hands/right_hand/joint_states /joint_states"/>

  </group>

  <!-- Include ros_control configuration for ur5, only used in simulation -->
  <group if="$(arg ur5_enabled)">

    <!-- Load UR5 controllers -->
    <rosparam command="load" file="$(find husky_control)/config/control_ur5.yaml" />
    <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" args="arm_controller --shutdown-timeout 3"/>

    <!-- Fake Calibration -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration" args="pub calibrated std_msgs/Bool true" />

    <!-- Stow the arm -->
    <node pkg="husky_control" type="stow_ur5" name="stow_ur5"/>

  </group>

  <group if="$(arg kinect_enabled)">

    <!-- Include poincloud_to_laserscan if simulated Kinect is attached -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

        <remap from="cloud_in" to="camera/depth/points"/>
        <remap from="scan" to="camera/scan"/>
        <rosparam>
            target_frame: base_link # Leave empty to output scan in the pointcloud frame
            tolerance: 1.0
            min_height: 0.05
            max_height: 1.0

            angle_min: -0.52 # -30.0*M_PI/180.0
            angle_max: 0.52 # 30.0*M_PI/180.0
            angle_increment: 0.005 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
    </node>

  </group>

    <!-- Spawn robot in gazebo -->
    <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
    args="$(optenv ROBOT_INITIAL_POSE) 
    -unpause -urdf -param robot_description -model mobile_base 
    -gazebo_namespace gazebo"/>

    <!-- Load the bumblebee depth and pointcloud capabilities -->
    <!-- <include file="$(find husky_gazebo)/launch/bumblebee_depth.launch"/> -->

    <!-- Launch script that stows husky arms -->
    <node name="position_husky_arms" type="setup_sim_positions" pkg="husky_gazebo"/>


</launch>

